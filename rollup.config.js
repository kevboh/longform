import svelte from "rollup-plugin-svelte";
import typescript from "@rollup/plugin-typescript";
import { nodeResolve } from "@rollup/plugin-node-resolve";
import commonjs from "@rollup/plugin-commonjs";
import sveltePreprocess from "svelte-preprocess";
import copy from "rollup-plugin-copy";
import { env } from "process";

const isProd = env.BUILD === "production";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/
`;

const getPlugins = (...plugins) =>
  [
    svelte({
      emitCss: false,
      preprocess: sveltePreprocess(),
    }),
    typescript({
      sourceMap: !isProd,
      inlineSources: !isProd,
      rootDir: "./src",
    }),
    nodeResolve({ browser: true, dedupe: ["svelte"] }),
    commonjs({
      include: "node_modules/**",
    }),
  ].concat(plugins);

const BASE_CONFIG = {
  input: "src/main.ts",
  external: ["obsidian"],
};

const DEV_PLUGIN_CONFIG = {
  ...BASE_CONFIG,
  output: {
    dir: "test-longform-vault/.obsidian/plugins/longform",
    sourcemap: "inline",
    format: "cjs",
    exports: "default",
  },
  plugins: getPlugins(
    copy({
      targets: [
        {
          src: "manifest.json",
          dest: "test-longform-vault/.obsidian/plugins/longform/",
        },
        {
          src: "styles.css",
          dest: "test-longform-vault/.obsidian/plugins/longform/",
        },
      ],
      hook: "writeBundle",
      verbose: true,
      overwrite: true,
    })
  ),
};

const PROD_PLUGIN_CONFIG = {
  ...BASE_CONFIG,
  output: {
    dir: ".",
    sourcemap: !isProd,
    format: "cjs",
    exports: "default",
    banner,
  },
  plugins: getPlugins(),
};

const config = isProd ? PROD_PLUGIN_CONFIG : DEV_PLUGIN_CONFIG;

export default config;
